package ackermann1;

import java.util.Scanner;

public class Ackermann {

    static int calls;

	
	static int digits[][]=new int[4][10000];
	private static int misses=0;

	private static int tableFound=0;

  
public static void main(String[] args) {

	int m = 0;
	int n=0;
   
	Scanner number= new Scanner (System.in);


	boolean options = true;

	while (options){
		System.out.println ("Welcome to the Ackermann project please pick which option you would like to choose :");
		System.out.println(" 1) Ackerman value \n 2) Ackerman Trace \n 3) Ackerman Table \n 4) Ackerman Graph \n 5) Exit program");
	 int	choose= number.nextInt(); //grab option number
	
	 switch(choose){
	
	 case 1:
		 System.out.println("Input M: ");
			if(number.hasNextInt())
			m=number.nextInt();
			else{
				System.out.println("Error: you must enter an integer");
				System.out.println("Program is ending");
				return;
			}
			System.out.println("M: "+m);
		
			System.out.println("Input n: ");
			if(number.hasNextInt())
			n= number.nextInt();
			else{
				System.out.println("Error: you must enter an integer");
				System.out.println("Program is ending");
				return;
			}
			System.out.println("N: "+n );
		 System.out.println("Start Ackerman: A(" + m + ", " + n + ")  "+ " Answer = " + Ackerman(m, n));
			
			break;
	 case 2:
		 System.out.println("Input M: ");
			if(number.hasNextInt())
			m=number.nextInt();
			else{
				System.out.println("Error: you must enter an integer");
				System.out.println("Program is ending");
				return;
			}
			System.out.println("M: "+m);
		
			System.out.println("Input n: ");
			if(number.hasNextInt())
			n= number.nextInt();
			else{
				System.out.println("Error: you must enter an integer");
				System.out.println("Program is ending");
				return;
			}
			System.out.println("N: "+n );
		 calls=0;
		 System.out.println("Start Ackerman: A(" + m + ", " + n + ")  "+" Answer = " +Ackerman(m, n)+ " calls :"+ calls);
	
		 break;
	 case 3:
		 System.out.println("Input M: ");
			if(number.hasNextInt())
			m=number.nextInt();
			else{
				System.out.println("Error: you must enter an integer");
				System.out.println("Program is ending");
				return;
			}
			System.out.println("M: "+m);
		
			System.out.println("Input n: ");
			if(number.hasNextInt())
			n= number.nextInt();
			else{
				System.out.println("Error: you must enter an integer");
				System.out.println("Program is ending");
				return;
			}
			System.out.println("N: "+n );
			System.out.println("The value is  = " +TableLookUp(m, n)+ " calls :"+ calls+ "  using the table look up.");
		 calls=0;
		 misses=0;
		 tableFound=0;
		 digits= new int[4][1000];
	
		 break;

	
	 case 5:
		 
		 System.out.println("Program endend");
		 System.exit(0);
	 }
	}}
public static int TableLookUp(int m,int n){	
//	is going to the boolean method to check if the array is equals zero
	if (ismissed(m, n)) {
		calls++;// increment the call
		misses++;//increment the misses
		System.out.println("Finds=" + tableFound + "   Misses=" + misses + "  Call=" + calls + "  M=" + m + "  N=" + n);

		if (m == 0) {
			digits[m][n] = n + 1;
			return digits[m][n];
		} else if (n == 0) {
			digits[m][n] = TableLookUp(m - 1, 1);
			return digits[m][n];
		} else {
			digits[m][n] = TableLookUp(m - 1, TableLookUp(m, n - 1));
			return digits[m][n];
		}
	} else {
		calls++;
		tableFound++;
		System.out.println("Found=" + tableFound + "   Misses=" + misses + "  Call=" + calls + "  M=" + m + "  N=" + n);
		return digits[m][n];
	}

}

	


public static int Ackerman(int m, int n) {
	calls ++;
	

	if(m == 0){

	
		return n+1;
		}
		else if( n == 0){

		return Ackerman(m-1,1); 
		}
		else if(m>0 && n>0){

		return Ackerman(m-1,Ackerman(m,n-1));

}

return Ackerman(m,n);

}
//if is miss it would return to the array that equals zero
private static boolean ismissed(int m, int n) {
	
	return (digits[m][n]==0);
}
}